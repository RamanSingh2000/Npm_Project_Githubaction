

name: Node.js CI

on:
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Choose deployment type'
        required: true
        default: 'container'
 

jobs:
  sonarqube:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16
      - name: Install dependencies
        run: yarn install
    
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build:

    runs-on: ubuntu-latest
    steps:
    # checkout the repository content to github runner
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Node.js environment
      uses: actions/setup-node@v2.1.5
      with:
        node-version: "16.9.1"
    - uses: actions/checkout@v2
    - name: Set up JDK 8
      uses: actions/setup-java@v1
      with:
        java-version: '1.8'
        distribution: 'adopt'
        

        # cache the dependencies to speed up the build
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

      # install dependencies
    - name: Install dependencies
      run: npm i

    # - name: Depcheck
    #   uses: dependency-check/Dependency-Check_Action@main
    #   env:
    #     JAVA_HOME: /opt/jdk
    #   id: Depcheck
    #   with:
    #     project: 'Npm_Project_Githubaction'
    #     path: '.'
    #     format: 'HTML'
    #     out: 'reports' # this is the default, no need to specify unless you wish to override it
    #     # args: >
    #     #   --failOnCVSS 10
    #     #   --enableRetired
    # - name: Upload Test results
    #   uses: actions/upload-artifact@master
    #   with:
    #      name: Depcheck report
    #      path: ${{github.workspace}}/reports

      # build the react app
    - name: Build
      run: npm run build

    - name: Create Tar file
      run: tar -czvf npm-${{ github.run_number }}.tar.gz -C build .
   
    - name: Archive Artifact
      uses: actions/upload-artifact@v2
      with:
        name: react-artifact
        path: build/ 
    - name: Upload to Nexus
      run: |
          curl -v -u admin:admin --upload-file npm-${{ github.run_number }}.tar.gz http://13.232.252.139:8082/repository/github-npm/
        
    
        
    - name: Build & push Docker image
      uses: mr-smithers-excellent/docker-build-push@v5
      with:
        image: ramansingh2000/nodeimage1
        tags: latest
        registry: docker.io
        dockerfile: Dockerfile
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Trivy Scan
      uses:  aquasecurity/trivy-action@master
      with:
        image-ref: ramansingh2000/nodeimage1:latest
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

  deploy:
    needs: build
    runs-on: self-hosted
    steps: 
      - name: Debug Outputs Structure
        run: |
          echo "Build Outputs: ${{ toJson(needs.build.outputs) }}
      - name: Retrieve Deployment Type from previous job
        run: |
          deployment_type=${{  needs.build.outputs.deployment_type }}
          echo "Deployment Type in Deploy Job: $deployment_type"
          echo "Deployment Type from inputs: ${{ github.event.inputs.deployment_type }}"

      - name: Deployment based on Type
        run: |
         if [[ "$deployment_type" == "container" ]]; then
          # Container deployment steps
          sudo docker pull ramansingh2000/nodeimage1
          sudo docker rm -f npm-example-container
          sudo docker run -d -p 8087:8080 --name npm-example-container ramansingh2000/nodeimage1:latest
         else
         
          sudo yum install wget -y
          # echo "NEXUS_USERNAME=your_username" >> ~/.bashrc
          # echo "NEXUS_PASSWORD=your_password" >> ~/.bashrc
          # source ~/.bashrc

          # Example: Download a WAR file from Nexus
          wget --user=admin --password=admin -O app.war "http://65.1.111.145:8082/repository/maven-devops/QA/devops-integration/${{ github.run_number }}/devops-integration-${{ github.run_number }}.war"

          # Download Tomcat Docker image
          sudo docker pull tomcat:8

          # Run Tomcat Docker container on port 8085
          sudo docker run -d -p 8085:8080 --name my-tomcat tomcat:8

          # Deploy the WAR file to Tomcat
          sudo docker cp app.war my-tomcat:/usr/local/tomcat/webapps/
         fi

